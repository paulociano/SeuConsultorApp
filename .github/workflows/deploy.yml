# Nome do seu workflow
name: CI/CD Pipeline

# Gatilho: Este workflow roda toda vez que houver um push na branch 'main'
on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    # O tipo de máquina que o workflow vai usar
    runs-on: ubuntu-latest

    steps:
      # 1. Pega o seu código do repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o Docker Buildx (um builder mais moderno)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Faz login no Docker Hub usando os segredos que você configurou
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Constrói e envia a imagem do Backend
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod # Usa o Dockerfile de produção
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/seuconsultor-backend:latest # Troque pelo seu usuário

      # 5. Constrói e envia a imagem do Frontend
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile # O Dockerfile do frontend já é de produção
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/seuconsultor-frontend:latest # Troque pelo seu usuário


      # --- PASSO FUTURO: DEPLOY ---
      # 6. Conecta ao seu servidor e atualiza a aplicação
      # Este passo é um EXEMPLO e dependerá do seu provedor de nuvem.
      # - name: Deploy to Server
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SERVER_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /caminho/para/seu/app
      #       docker compose pull
      #       docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
