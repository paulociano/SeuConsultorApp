const request = require('supertest');
const { app, server } = require('../index');
// 1. Importar o 'pool' da base de dados
const pool = require('../config/db');

describe('Endpoints de Objetivos (Protegidos)', () => {
    let token;
    let userId;

    beforeAll(async () => {
        const testUser = {
            nome: 'Utilizador Objetivos',
            email: `objetivos-${Date.now()}@exemplo.com`,
            senha: 'password123'
        };

        const registerRes = await request(app)
            .post('/cadastro')
            .send(testUser);
        
        userId = registerRes.body.usuario.id;

        const loginRes = await request(app)
            .post('/login')
            .send({ email: testUser.email, senha: testUser.senha });
        
        token = loginRes.body.token;
    });

    // 2. A função 'afterAll' agora também fecha a ligação à base de dados
    afterAll(async () => {
        await new Promise(resolve => server.close(resolve));
        await pool.end();
    });

    // --- Testes de Acesso ---
    it('deve retornar erro 401 se não for fornecido um token', async () => {
        const res = await request(app).get('/api/objetivos');
        expect(res.statusCode).toEqual(401);
    });

    it('deve retornar erro 403 se for fornecido um token inválido', async () => {
        const res = await request(app)
            .get('/api/objetivos')
            .set('Authorization', 'Bearer tokeninvalido123');
        expect(res.statusCode).toEqual(403);
    });

    // --- Testes do CRUD de Objetivos ---
    let objetivoId;

    it('deve criar um novo objetivo com sucesso', async () => {
        const novoObjetivo = {
            nome: 'Comprar um Carro',
            icon: 'Car',
            valorAlvo: 50000,
            aporteMensal: 500,
            investimentosLinkados: []
        };

        const res = await request(app)
            .post('/api/objetivos')
            .set('Authorization', `Bearer ${token}`)
            .send(novoObjetivo);
        
        expect(res.statusCode).toEqual(201);
        expect(res.body).toHaveProperty('id');
        expect(res.body.nome).toBe(novoObjetivo.nome);
        expect(parseFloat(res.body.valor_alvo)).toBe(novoObjetivo.valorAlvo);

        objetivoId = res.body.id;
    });

    it('deve listar os objetivos do utilizador', async () => {
        const res = await request(app)
            .get('/api/objetivos')
            .set('Authorization', `Bearer ${token}`);

        expect(res.statusCode).toEqual(200);
        expect(Array.isArray(res.body)).toBe(true);
        expect(res.body.length).toBeGreaterThan(0);
        expect(res.body.some(o => o.id === objetivoId)).toBe(true);
    });

    it('deve atualizar um objetivo existente', async () => {
        const dadosAtualizados = {
            nome: 'Comprar um Carro Elétrico',
            icon: 'Car',
            valorAlvo: 75000,
            aporteMensal: 700,
            investimentosLinkados: []
        };

        const res = await request(app)
            .put(`/api/objetivos/${objetivoId}`)
            .set('Authorization', `Bearer ${token}`)
            .send(dadosAtualizados);

        expect(res.statusCode).toEqual(200);
        expect(res.body.nome).toBe(dadosAtualizados.nome);
        expect(parseFloat(res.body.valor_alvo)).toBe(dadosAtualizados.valorAlvo);
    });

    it('deve apagar um objetivo existente', async () => {
        const res = await request(app)
            .delete(`/api/objetivos/${objetivoId}`)
            .set('Authorization', `Bearer ${token}`);

        expect(res.statusCode).toEqual(204);

        const getRes = await request(app)
            .get('/api/objetivos')
            .set('Authorization', `Bearer ${token}`);
        
        expect(getRes.body.some(o => o.id === objetivoId)).toBe(false);
    });
});
