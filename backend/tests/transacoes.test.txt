const request = require('supertest');
const { app, server } = require('../index');
const pool = require('../config/db');

describe('Endpoints de Transações (Protegidos)', () => {
    let token;

    // Antes de todos os testes, criamos um utilizador e fazemos login para obter um token
    beforeAll(async () => {
        const testUser = {
            nome: 'Utilizador Transacoes',
            email: `transacoes-${Date.now()}@exemplo.com`,
            senha: 'password123'
        };
        await request(app).post('/cadastro').send(testUser);
        const loginRes = await request(app)
            .post('/login')
            .send({ email: testUser.email, senha: testUser.senha });
        token = loginRes.body.token;
    });

    // Fechar o servidor e a pool da base de dados após todos os testes
    afterAll(async () => {
        await new Promise(resolve => server.close(resolve));
        await pool.end();
    });

    let transacaoId;

    it('deve criar uma nova transação de despesa com sucesso', async () => {
        const novaTransacao = {
            descricao: 'Almoço de trabalho',
            valor: 45.50,
            data: '2025-07-29',
            tipo: 'despesa',
            categoria: 'alimentacao',
            ignorada: false
        };

        const res = await request(app)
            .post('/api/transacoes')
            .set('Authorization', `Bearer ${token}`)
            .send(novaTransacao);

        expect(res.statusCode).toEqual(201);
        expect(res.body).toHaveProperty('id');
        expect(res.body.descricao).toBe(novaTransacao.descricao);
        expect(res.body.tipo).toBe('despesa');
        transacaoId = res.body.id; // Guardar o ID para os testes seguintes
    });

    it('deve criar uma nova transação de receita com sucesso', async () => {
        const novaReceita = {
            descricao: 'Pagamento de Freelance',
            valor: 1200.00,
            data: '2025-07-28',
            tipo: 'receita',
            categoria: 'freelance' // A categoria pode ser qualquer string
        };

        const res = await request(app)
            .post('/api/transacoes')
            .set('Authorization', `Bearer ${token}`)
            .send(novaReceita);

        expect(res.statusCode).toEqual(201);
        expect(res.body.tipo).toBe('receita');
    });

    it('deve falhar ao criar uma transação com dados inválidos', async () => {
        const transacaoInvalida = {
            descricao: 'Transação Inválida',
            valor: 100,
            // Faltam os campos 'data' e 'tipo'
        };

        const res = await request(app)
            .post('/api/transacoes')
            .set('Authorization', `Bearer ${token}`)
            .send(transacaoInvalida);
        
        expect(res.statusCode).toEqual(400); // Bad Request
    });

    it('deve listar todas as transações do utilizador', async () => {
        const res = await request(app)
            .get('/api/transacoes')
            .set('Authorization', `Bearer ${token}`);

        expect(res.statusCode).toEqual(200);
        expect(Array.isArray(res.body)).toBe(true);
        // Deve haver pelo menos 2 transações que criámos
        expect(res.body.length).toBeGreaterThanOrEqual(2);
        // Verifica se a primeira transação criada está na lista
        expect(res.body.some(t => t.id === transacaoId)).toBe(true);
    });

    it('deve atualizar uma transação existente', async () => {
        const dadosAtualizados = {
            descricao: 'Almoço de trabalho (editado)',
            valor: 50.00,
            data: '2025-07-29',
            tipo: 'despesa',
            categoria: 'alimentacao',
            ignorada: true
        };

        const res = await request(app)
            .put(`/api/transacoes/${transacaoId}`)
            .set('Authorization', `Bearer ${token}`)
            .send(dadosAtualizados);

        expect(res.statusCode).toEqual(200);
        expect(res.body.descricao).toBe(dadosAtualizados.descricao);
        expect(res.body.ignorada).toBe(true);
    });

    it('deve apagar uma transação existente', async () => {
        const res = await request(app)
            .delete(`/api/transacoes/${transacaoId}`)
            .set('Authorization', `Bearer ${token}`);

        expect(res.statusCode).toEqual(204); // No Content

        // Verificar se a transação foi realmente apagada
        const getRes = await request(app)
            .get('/api/transacoes')
            .set('Authorization', `Bearer ${token}`);
            
        expect(getRes.body.some(t => t.id === transacaoId)).toBe(false);
    });
});
